@startuml "GLP_Ecriture_2023_UML"

skinparam linetype ortho

set namespaceSeparator .

title Projet Ecriture - UML

package fr.cyu.smartread {
    package "module deeplearning" <<Frame>> {
        package activationfunctions <<Folder>> {
        }

        package layers <<Folder>> {
        }

        package lossfunctions <<Folder>> {
        }
    }

    package "module app" <<Frame>> {
        package gui <<Folder>> {
        }

        package preprocessing <<Folder>> {
        }

        package wrappers <<Folder>> {
            package corrector <<Folder>> {
                class Corrector {
                    -Dictionary dict
                    -SpellChecker spellChecker;
                    +Collection<CorrectionWords> getCorrections(String source, Collection<WordScore> listWords)
                }
                package Dictionary <<Folder>> {
                    interface Dictionary {
                        +Collection<String> getAssociatedWordDict(String word)
                    }

                    class DictionaryByNumberOfCharacterLoader implements Dictionary{
                        -HashMap<short, String> hm_wordByNbCharacter
                        +DictionaryByNumberOfCharacterLoader(Path path)
                        +Collection<String> getAssociatedWordDict(String word)
                    }
                }
            }
        }

        package users <<Folder>> {
        }
    }

    package "module spellchecking" <<Frame>> {
        class SpellChecker {
            - InterfaceStringMetrics similarityDistanceComputer
            + ArrayList<WordScore> getCorrections(String source, Collection<String> listWords)
        }

        class WordScore {
            - String target
            - float score
        }

        package stringmetrics <<Folder>> {
            interface InterfaceStringMetrics {
                +float computeDistance(String source, String target)
            }

            class LevenshteinDistance implements InterfaceStringMetrics {
                - int insertionCost
                - int deletionCost
                - int substitutionCost
                +LevenshteinDistance(int insertionCost, int deletionCost, int substitutionCost)
                +float computeDistance(String source, String target)
            }

            class JaroWinklerDistance implements InterfaceStringMetrics {
                +JaroWinklerDistance()
                +float computeDistance(String source, String target)
            }
        }
    }
}

@enduml
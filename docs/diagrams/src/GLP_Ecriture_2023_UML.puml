@startuml "GLP_Ecriture_2023_UML"

skinparam linetype ortho

set namespaceSeparator .

title Projet Ecriture - UML

package fr.cyu.smartread {
    package "module deeplearning" <<Frame>> {
        package activationfunctions <<Folder>> {
        }

        package layers <<Folder>> {
        }

        package lossfunctions <<Folder>> {
        }
    }

    package "module app" <<Frame>> {
        package gui <<Folder>> {
            package components {
                class MenuBar
                class Cards
            }

            package palettes {
                class ColorPallet
                class BorderPallet
            }
        }

        package preprocessing <<Folder>> {
        }

        package wrappers <<Folder>> {
            package corrector <<Folder>> {
                class Corrector {
                    -Dictionary: dict
                    -DictionaryByNumberOfCharacterLoader dictLoader
                    -StringMetricsInterface stringMetrics
                    -SpellChecker: spellChecker

                    +Corrector()
                    +getCorrections(String source, Collection<WordScore> listWords): Collection<CorrectionWords>
                }
            }
        }

        package users <<Folder>> {
        }
    }

    package "module spellchecking" <<Frame>> {
        class SpellChecker {
            -StringMetricsInterface: similarityDistanceComputer
            -DictionaryLoaderInterface: dictionaryLoader

            +getSimilarityScore(String source): ArrayList<WordScore>
        }

        class WordScore {
            - String: target
            - float: score
        }

        package stringmetrics <<Folder>> {
            interface InterfaceStringMetrics {
                +computeDistance(String source, String target): float
            }

            package levenshtein <<Folder>> {
                class LevenshteinDistance implements InterfaceStringMetrics {
                    -short: insertionCost
                    -short: deletionCost
                    -short: substitutionCost

                    +LevenshteinDistance()
                    +LevenshteinDistance(int insertionCost, int deletionCost, int substitutionCost)
                    +computeDistance(String source, String target): float
                }

                class CellLevArray {
                    - short x
                    - short y
                    - short value

                    +CellLevArray(short x, short y, short value)
                    -areYorXorValueNegative(): boolean
                    +getX(): short
                    +getY(): short
                    +getValue(): short
                }
            }

            class JaroWinklerDistance implements InterfaceStringMetrics {
                +JaroWinklerDistance()
                +computeDistance(String source, String target): float
            }
        }
        package Dictionary <<Folder>> {
                    interface DictionaryLoaderInterface {
                        +getAssociatedWordDict(String word): Dictionary
                        +addDictionary(Dictionary dict): DictionaryLoaderInterface
                    }

                    class DictionaryByNumberOfCharacterLoader implements DictionaryLoaderInterface {
                        -HashMap<Short, DictionaryByNumberOfCharacter>: wordByNbCharacterHm
                        -String: minNbCharacters
                        -String: maxNbCharacters

                        +DictionaryByNumberOfCharacterLoader()
                        +getAssociatedWordDict(String word): Dictionary
                        +addDictionary(Dictionary dict): DictionaryLoaderInterface
                        -updateNbCharacters(DictionaryByNumberOfCharacter dict): DictionaryByNumberOfCharacterLoader
                        -hasDictForThisWord(String word): boolean
                    }

                    class Dictionary {
                        -ArrayList<String>: wordList

                        +Dictionary()
                        +addWord(String word): Dictionary
                        +populateFromFile(String path): Dictionary
                        +serialize(String path): Dictionary
                        +load(String path): Dictionary
                        +getWordList(): ArrayList<String>
                    }

                    class DictionaryByNumberOfCharacter extends Dictionary {
                        -short: wordLength

                        +getWordLength(): short
                        -setWordLength(short wordLength): void
                    }

                    class WordNotSupportedException extends IllegalArgumentException {
                        -String: word
                    }

                    class NoDictionarySuitableForThisWord extends IllegalArgumentException {
                        -String: word
                    }

                    class FiletypeNotSupportedException extends IllegalArgumentException {
                        -File: file
                        -String: filetype
                    }
                }
    }
}

@enduml